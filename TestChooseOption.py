
# Generated by CodiumAI
from mock import patch
from face_crop import choose_option


import unittest

class TestChooseOption(unittest.TestCase):

    # Tests that the function returns the chosen option when the user inputs a valid integer between 1 and 6
    def test_valid_integer_input(self):
        with patch('builtins.input', return_value='1'):
            self.assertEqual(choose_option(), 1)
        with patch('builtins.input', return_value='2'):
            self.assertEqual(choose_option(), 2)
        with patch('builtins.input', return_value='3'):
            self.assertEqual(choose_option(), 3)
        with patch('builtins.input', return_value='4'):
            self.assertEqual(choose_option(), 4)
        with patch('builtins.input', return_value='5'):
            self.assertEqual(choose_option(), 5)
        with patch('builtins.input', return_value='6'):
            self.assertEqual(choose_option(), 6)

    # Tests that the function prompts the user again until a valid integer is entered when the user inputs an invalid integer
    def test_invalid_integer_input(self):
        with patch('builtins.input', side_effect=['0', '7', 'invalid', '3']):
            self.assertEqual(choose_option(), 3)

    # Tests that the function prompts the user again until a valid integer is entered when the user inputs a non-integer value
    def test_non_integer_input(self):
        with patch('builtins.input', side_effect=['abc', 'def', '123']):
            self.assertEqual(choose_option(), 123)

    # Tests that the function prompts the user again until a valid integer is entered when the user inputs an integer less than 1
    def test_integer_less_than_1(self):
        with patch('builtins.input', side_effect=['-1', '0', '1']):
            self.assertEqual(choose_option(), 1)

    # Tests that the function prompts the user again until a valid integer is entered when the user inputs an integer greater than 6
    def test_integer_greater_than_6(self):
        with patch('builtins.input', side_effect=['7', '8', '6']):
            self.assertEqual(choose_option(), 6)

    # Tests that the function raises a ValueError when the user inputs a string after inputting a valid integer
    def test_invalid_input_after_valid_integer(self):
        with patch('builtins.input', side_effect=['1', 'invalid']):
            with self.assertRaises(ValueError):
                choose_option()